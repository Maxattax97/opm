#! /bin/sh
opm_cli() {
unset -f opm_cli
export OPM_LIB_VERSION="0.0.1"
OPM_DEBUG=1
OPM_RED() { if [ "$OpM27" -eq 0 ]; then printf '\033[0;91m'; fi; }
OPM_GREEN() { if [ "$OpM27" -eq 0 ]; then printf '\033[0;92m'; fi; }
OPM_YELLOW() { if [ "$OpM27" -eq 0 ]; then printf '\033[0;93m'; fi; }
OPM_BLUE() { if [ "$OpM27" -eq 0 ]; then printf '\033[0;94m'; fi; }
OPM_MAGENTA() { if [ "$OpM27" -eq 0 ]; then printf '\033[0;95m'; fi; }
OPM_CYAN() { if [ "$OpM27" -eq 0 ]; then printf '\033[0;96m'; fi; }
OPM_RESET() { if [ "$OpM27" -eq 0 ]; then printf '\033[0m'; fi; }
OPM_BLINK() { if [ "$OpM27" -eq 0 ]; then printf '\033[5m'; fi; }
OPM_HIGHLIGHT() { if [ "$OpM27" -eq 0 ]; then printf '\033[0;94m'; fi; }
OPM_GREP_COLORS='ms=01;94'
OPM_REPO_RAW_ROOT="https://raw.githubusercontent.com/Maxattax97/opm"
OPM_REPO_ROOT="https://github.com/Maxattax97/opm"
OPM_DEFAULT_NODE="node"
OPM_DEFAULT_PYTHON="python"
OPM_DEFAULT_RUBY="ruby"
OPM_DELIM=':'
OpM34=0
OpM27=0
OpM26=0 # Trim off the decor.
OpM19=1
OpM23=1
OpM40=1
OpM18=0
OpM66=0
OpM70=0
OpM46=0
OpM48=0
OpM43=0
OpM35=0
OpM60=0
OpM64=0
OpM63=0
OpM67=0
OpM55=0
OpM52=0
OpM68=0
OpM72="LINUX"
OpM20=0
OpM17=0
OpM28="./pool.db"
OpM25=0
OpM24=
OpM15=
OpM3=
OpM14=
OpM2=
OpM12=
OpM16=
OpM13=
OpM8=0
OpM11=0
OpM6=0
OpM9=
OpM1=
OpM10=
OpM4=
OpM7=
OpM5=
OpM0=
msg() {
if [ "$OpM34" -eq 0 ]; then
if [ -n "$2" ] && [ "$2" -ne 0 ]; then
printf '%b' "$1"
else
printf '%b\n' "$1"
fi
fi
}
success() {
if [ "$OpM26" -eq 0 ]; then
msg "$(OPM_GREEN)[*]$(OPM_RESET) ${1}${2}" "${3}"
else
msg "${1}${2}" "${3}"
fi
}
info() {
if [ "$OpM26" -eq 0 ]; then
msg "$(OPM_BLUE)[~]$(OPM_RESET) ${1}${2}" "${3}"
else
msg "${1}${2}" "${3}"
fi
}
warn() {
if [ "$OpM26" -eq 0 ]; then
msg "$(OPM_YELLOW)[!]$(OPM_RESET) ${1}${2}" "${3}"
else
msg "${1}${2}" "${3}"
fi
}
error() {
if [ "$OpM26" -eq 0 ]; then
msg "$(OPM_RED)$(OPM_BLINK)[X]$(OPM_RESET) ${1}${2}" "${3}"
else
msg "${1}${2}" "${3}"
fi
}
query() {
if [ "$OpM26" -eq 0 ]; then
msg "$(OPM_MAGENTA)$(OPM_BLINK)[?]$(OPM_RESET) ${1}${2}" "1"
else
msg "${1}${2}" "${3}"
fi
}
dry() {
if [ "$OpM26" -eq 0 ]; then
msg "$(OPM_MAGENTA) > $(OPM_RESET) ${1}${2}" "${3}"
else
msg "${1}${2}" "${3}"
fi
}
none() {
if [ "$OpM26" -eq 0 ]; then
msg "    ${1}${2}" "${3}"
else
msg "${1}${2}" "${3}"
fi
}
debug() {
if [ "$OPM_DEBUG" -ne 0 ]; then
if [ "$OpM26" -eq 0 ]; then
msg "$(OPM_CYAN)$(OPM_BLINK)[#]$(OPM_RESET) ${1}${2}" "${3}"
else
msg "${1}${2}" "${3}"
fi
fi
}
check() {
if [ "$?" -eq 0 ]; then
success "$1"
else
error "$2"
if [ -z "$3" ]; then
opm_abort
fi
fi
}
silence() {
eval "$@" > /dev/null 2>&1
}
OpM21=2
opm_confirm() {
OpM54=0
while [ "$OpM54" = 0 ]; do
if [ -n "$1" ]; then
query "${1} [y/N] "
else
query "Continue? [y/N] "
fi
read -r -p "" response
case "$response" in
[yY][eE][sS]|[yY])
OpM54=1
OpM21=1
;;
[nN][oO]|[nN])
OpM54=1
OpM21=0
;;
esac
done
}
opm_dry_exec() {
if [ "$OpM40" -ne 0 ]; then
dry "$*"
else
eval "$@"
fi
}
opm_dry_elevated_exec() {
if [ "$(id -u)" != 0 ]; then
if [ "$OpM40" -ne 0 ]; then
if [ "$OpM53" -ne 0 ]; then
dry "sudo $*"
else
dry "su root -c \"$*\""
fi
else
if [ "$OpM53" -ne 0 ]; then
eval sudo "$@"
else
error "This operation cannot be performed on a system without sudo. Please either execute this script as root or setup sudo."
opm_abort
fi
fi
else
eval "$@"
fi
}
opm_abort() {
error "Aborting ..."
exit 1
}
opm_probe() {
if silence type "$1"; then
echo "1"
else
echo "0"
fi
}
opm_elevate() {
if [ "$(id -u)" != 0 ]; then
if [ "$OpM53" -ne 0 ]; then
if silence sudo -n -v; then
sudo "$@"
else
info "Attempting to elevate to root ..."
if [ -z "$1" ]; then
sudo -v
else
sudo "$@"
fi
fi
else
error "This operation cannot be performed on a system without sudo. Please either execute this script as root or setup sudo."
opm_abort
fi
fi
}
opm_refresh_sudo() {
if [ "$OpM19" -ne 0 ]; then
sudo -v
fi
}
opm_end_sudo() {
if [ "$OpM19" -ne 0 ]; then
sudo -k
fi
}
opm_get_column_code() {
OpM71="$2"
case "$2" in
"apt") column=2;;
"zypper") column=3;;
"dnf") column=4;;
"pacman") column=5;;
"portage") column=6;;
"slackpkg") column=7;;
"pkg") column=8;;
"nix") column=9;;
"apk") column=10;;
"npm") column=11;;
"pip") column=12;;
"gem") column=13;;
"cargo") column=14;;
"go") column=15;;
"cabal") column=16;;
"flatpak") column=17;;
"snap") column=18;;
"appimage") column=19;;
"source") column=20;;
(*[!0-9]*|'') column="$2";;
*) error "Invalid column: $2" && opm_abort;;
esac
OpM75="$(echo "$1" | awk -F',|;' "{ print \$${OpM71} };" | cut -c1-1)"
if [ "$OpM75" = '%' ]; then
echo "0"
elif [ "$OpM75" = '!' ]; then
if [ "$OpM71" -eq 20 ]; then
echo "1"
else
echo "2"
fi
elif [ "$OpM75" = '$' ]; then
echo "3"
elif [ "$OpM75" = '@' ]; then
echo "4"
else
echo "1"
fi
}
opm_print_enabled() {
if [ "$OpM34" -eq 0 ]; then
if [ "$1" -eq 1 ]; then
printf "$(OPM_GREEN)${2}$(OPM_RESET) "
elif [ "$1" -eq 0 ]; then
printf "$(OPM_RED)${2}$(OPM_RESET) "
else
printf "$(OPM_YELLOW)${2}$(OPM_RESET) "
fi
fi
}
opm_init() {
debug "OPM is being interpretted by: $(ps h -p $$ -o args='' | cut -f1 -d' ')"
OpM66="$(opm_probe apt)"
OpM70="$(opm_probe dnf)"
OpM46="$(opm_probe zypper)"
OpM48="$(opm_probe pacman)"
OpM43="$(opm_probe emerge)"
OpM35="$(opm_probe slackpkg)"
OpM60="$(opm_probe nix)"
OpM64="$(opm_probe npm)"
OpM63="$(opm_probe gem)"
OpM67="$(opm_probe pip)"
OpM55="$(opm_probe wget)"
OpM52="$(opm_probe curl)"
OpM68="$(opm_probe git)"
OpM53="$(opm_probe sudo)" # Permissions get much more complicated without this.
OpM57="$(opm_probe gzip)" # Really we need gunzip, but gzip has -d flag.
OpM36="$(expr $OpM66 + $OpM70 + $OpM70 + $OpM46 + \
$OpM43 + $OpM35 + $OpM60 + $OpM64 + \
$OpM63 + $OpM67)"
if [ "$OpM36" -gt 0 ]; then
success "Discovered $OpM36 package managers on this system:"
opm_print_enabled "$OpM66" "apt"
opm_print_enabled "$OpM70" "dnf"
opm_print_enabled "$OpM46" "zypper"
opm_print_enabled "$OpM64" "npm"
opm_print_enabled "$OpM63" "gem"
opm_print_enabled "$OpM67" "pip"
if [ "$OpM34" -eq 0 ]; then
printf '\n'
fi
success "Discovered these tools:"
opm_print_enabled "$OpM55" "wget"
opm_print_enabled "$OpM52" "curl"
opm_print_enabled "$OpM68" "git"
if [ "$OpM34" -eq 0 ]; then
printf '\n'
fi
else
error "Failed to discover any package managers."
opm_abort
fi
opm_detect_os
if [ -n "$OpM72" ]; then
info "Detected this OS to be $(OPM_HIGHLIGHT)${OpM72}$(OPM_RESET)."
fi
OpM20=1
if [ ! -s "$OpM28" ]; then
opm_fetch
fi
success "OPM is ready."
}
opm_install() {
if [ "$OpM20" -eq 0 ]; then
opm_init
fi
if [ ! -z "$#" ]; then
opm_queue "$@"
fi
if [ "$OpM66" -ne 0 ] && [ -n "$OpM9" ]; then
info "Installing packages via APT ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM18" -ne 0 ]; then
OpM78="$OpM78 -y"
fi
opm_dry_elevated_exec apt-get install $OpM78 $OpM9
check "APT packages installed." "APT failed to install packages."
fi
if [ "$OpM70" -ne 0 ] && [ -n "$OpM10" ]; then
info "Installing packages via DNF ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM18" -ne 0 ]; then
OpM78="$OpM78 -y"
fi
opm_dry_elevated_exec dnf install $OpM78 $OpM10
check "DNF packages installed." "DNF failed to install packages."
fi
if [ "$OpM46" -ne 0 ] && [ -n "$OpM1" ]; then
info "Installing packages via Zypper ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM18" -ne 0 ]; then
OpM78="$OpM78 --non-interactive"
fi
opm_dry_elevated_exec zypper $OpM78 install $OpM1
check "Zypper packages installed." "Zypper failed to install packages."
fi
if [ -n "$OpM2" ]; then
IFS="${OPM_DELIM}"
for OpM62 in ${OpM2}; do
OpM32="$(echo "$OpM62" | awk -F'_' '{ print $1 }')"
OpM31="$(echo "$OpM62" | awk -F'_' '{ print $2 }')"
IFS=' '
opm_install_special "$OpM32" "$OpM31"
IFS="${OPM_DELIM}"
done
IFS=' '
fi
if [ "$OpM8" -ne 0 ]; then
OpM8=0
OpM64=1
info "NPM has been installed and enabled."
fi
if [ "$OpM11" -ne 0 ]; then
OpM11=0
OpM67=1
info "Pip has been installed and enabled."
fi
if [ "$OpM6" -ne 0 ]; then
OpM6=0
OpM63=1
info "Gem has been installed and enabled."
fi
if [ "$OpM64" -ne 0 ] && [ -n "$OpM4" ]; then
info "Installing packages via NPM ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
opm_dry_exec npm install -g $OpM78 $OpM4
check "NPM packages installed." "NPM failed to install packages."
fi
OpM15=
OpM3=
OpM14=
OpM2=
OpM12=
OpM16=
OpM13=
OpM8=0
OpM11=0
OpM6=0
OpM9=
OpM1=
OpM10=
OpM4=
OpM7=
OpM5=
OpM0=
}
opm_install_special() {
OpM62="$1"
OpM59="$2"
OpM51=
if [ -z "$OpM62" ]; then
error "A package must be specified ($1 $2)"
opm_abort
fi
if [ -z "$OpM59" ]; then
error "A manager must be specified ($1 $2)"
opm_abort
elif [ "$OpM59" = "apt" ] || [ "$OpM59" = "zypper" ] || [ "$OpM59" = "dnf" ]; then
OpM51="primary"
elif [ "$OpM59" = "npm" ] || [ "$OpM59" = "pip" ] || [ "$OpM59" = "gem" ]; then
OpM51="secondary"
elif [ "$OpM59" = "flatpak" ] || [ "$OpM59" = "snap" ]; then
OpM51="tertiary"
else
OpM51="source"
fi
if [ "$OpM59" = "source" ]; then
OpM56="packages/${OpM51}/${OpM62}"
else
OpM56="packages/${OpM51}/${OpM59}/${OpM62}"
fi
OpM47=0
while [ "$OpM47" -eq 0 ]; do
if [ "$OpM55" -ne 0 ]; then
debug "Re-enable dry mode"
wget -O /tmp/OPM_INSTALL "${OPM_REPO_RAW_ROOT}/master/${OpM56}"
elif [ "$OpM52" -ne 0 ]; then
opm_dry_exec curl -o /tmp/OPM_INSTALL "${OPM_REPO_RAW_ROOT}/master/${OpM56}"
elif [ "$OpM68" -ne 0 ]; then
opm_dry_exec git clone "${OPM_REPO_ROOT}" /tmp/opm/
opm_dry_exec cp "/tmp/opm/${OpM56}" /tmp/OPM_INSTALL
else
error "No tools are available on this system to fetch remote resources."
fi
if [ -s /tmp/OPM_INSTALL ]; then
info "Previewing installation script ..."
if [ "$(opm_probe most)" -ne 0 ]; then
most /tmp/OPM_INSTALL
elif [ "$(opm_probe less)" -ne 0 ]; then
less /tmp/OPM_INSTALL
elif [ "$(opm_probe more)" -ne 0 ]; then
more /tmp/OPM_INSTALL
else
cat /tmp/OPM_INSTALL
fi
opm_confirm "Continue installing $(OPM_HIGHLIGHT)$1$(OPM_RESET)?"
if [ "$OpM21" -ne 0 ]; then
info "Beginning to install $(OPM_HIGHLIGHT)$1$(OPM_RESET) ..."
chmod +x /tmp/OPM_INSTALL
opm_elevate /tmp/OPM_INSTALL
check "Installation successful." "Installation failed."
OpM47=1;
else
warn "Aborting installation of $(OPM_HIGHLIGHT)${1}$(OPM_RESET)."
OpM47=1;
fi
else
error "Failed to download the installer script for $(OPM_HIGHLIGHT)$1$(OPM_RESET)"
opm_confirm "Retry?"
if [ "$OpM21" -eq 0 ]; then
OpM47=1;
fi
fi
done
}
opm_refresh() {
if [ "$OpM20" -eq 0 ]; then
opm_init
fi
OpM77=""
if [ "$OpM66" -ne 0 ]; then
info "Refreshing APT ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM23" -ne 0 ]; then
opm_dry_elevated_exec apt-get $OpM78 update &
OpM77="${!}${OPM_DELIM}${OpM77}"
else
opm_dry_elevated_exec apt-get $OpM78 update
check "APT refreshed." "APT failed to refresh."
fi
fi
if [ "$OpM70" -ne 0 ]; then
info "Refreshing DNF ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM23" -ne 0 ]; then
opm_dry_elevated_exec dnf $OpM78 check-update &
OpM77="${!}${OPM_DELIM}${OpM77}"
else
opm_dry_elevated_exec dnf $OpM78 check-update
check "DNF refreshed." "DNF failed to refresh."
fi
fi
if [ "$OpM46" -ne 0 ]; then
info "Refreshing Zypper ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM23" -ne 0 ]; then
opm_dry_elevated_exec zypper $OpM78 refresh &
OpM77="${!}${OPM_DELIM}${OpM77}"
else
opm_dry_elevated_exec zypper $OpM78 refresh
check "Zypper refreshed." "Zypper failed to refresh."
fi
fi
opm_refresh_sudo
OpM58=0
OpM77="${OpM77%%${OPM_DELIM}}"
IFS="$OPM_DELIM"
for OpM79 in $OpM77; do
debug "waiting on fork $OpM79"
wait $OpM79 || failures="$(expr $OpM58 + 1)"
opm_refresh_sudo
done
IFS=' '
if [ "$OpM58" -gt 0 ]; then
error "A package manager failed to refresh."
else
success "All package managers refreshed."
fi
}
opm_upgrade() {
if [ "$OpM20" -eq 0 ]; then
opm_init
fi
OpM77=
OpM50=0
if [ "$OpM66" -ne 0 ]; then
info "Upgrading APT ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM18" -ne 0 ]; then
OpM78="$OpM78 -y"
fi
opm_dry_elevated_exec apt-get $OpM78 upgrade
check "APT upgraded." "APT failed to upgrade."
fi
if [ "$OpM70" -ne 0 ]; then
info "Upgrading DNF ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM18" -ne 0 ]; then
OpM78="$OpM78 -y"
fi
opm_dry_elevated_exec dnf $OpM78 upgrade
check "DNF upgraded." "DNF failed to upgrade."
fi
if [ "$OpM46" -ne 0 ]; then
info "Upgrading Zypper ..."
OpM78=""
if [ "$OpM34" -ne 0 ]; then
OpM78="$OpM78 --quiet"
fi
if [ "$OpM18" -ne 0 ]; then
OpM78="$OpM78 --non-interactive"
fi
opm_dry_elevated_exec zypper $OpM78 update
check "Zypper upgraded." "Zypper failed to upgrade."
fi
}
opm_add_repo() {
debug "Not yet implemented."
}
opm_fetch() {
if [ "$OpM20" -eq 0 ]; then
opm_init
fi
if [ "$OpM17" -eq 0 ]; then
if [ "$OpM55" -ne 0 ]; then
opm_dry_exec wget -O /tmp/OPM_UPDATE "${OPM_REPO_RAW_ROOT}/master/lookup"
check "Fetched latest resources." "Failed to fetch resources."
opm_dry_exec cp /tmp/OPM_UPDATE "$OpM28"
OpM17=1
elif [ "$OpM52" -ne 0 ]; then
opm_dry_exec curl -o /tmp/OPM_UPDATE "${OPM_REPO_RAW_ROOT}/master/lookup"
check "Fetched latest resources." "Failed to fetch resources."
opm_dry_exec cp /tmp/OPM_UPDATE "$OpM28"
OpM17=1
elif [ "$OpM68" -ne 0 ]; then
opm_dry_exec git clone "${OPM_REPO_ROOT}" /tmp/opm/
check "Fetched latest resources." "Failed to fetch resources."
opm_dry_exec cp /tmp/opm/lookup "$OpM28"
OpM17=1
else
error "No tools are available on this system to fetch remote resources."
fi
else
info "Skipping fetch since it was recently completed."
fi
}
opm_query() {
if [ -z "$#" ]; then
error "You must specify a list of terms to search with."
abort
fi
if [ "$OpM20" -eq 0 ]; then
opm_init
fi
OpM74=""
for OpM80 in "$@"; do
OpM74="${OpM80}|${OpM74}"
done
OpM74="${OpM74%%|}"
OpM69="$(grep -iE "$OpM74" "$OpM28")"
info "Results for: $*"
if [ "$OpM34" -eq 0 ]; then
if [ "$OpM27" -eq 0 ]; then
echo "$OpM69" | awk -F';' '{ print "    " $1 "\t\t\t" $6 }' | GREP_COLORS="${OPM_GREP_COLORS}" grep -iE --color "$OpM74|$"
else
echo "$OpM69" | awk -F';' '{ print "    " $1 "\t\t\t" $6 }' | grep -iE "$OpM74|$"
fi
fi
}
opm_queue() {
if [ -z "$#" ]; then
error "You must specify a list of terms to search with."
abort
fi
if [ "$OpM20" -eq 0 ]; then
opm_init
fi
OpM22=
for OpM62 in "$@"; do
OpM54=1
OpM37="$(grep -m 1 -iE "^${OpM62};" "$OpM28")"
if [ -z "$OpM37" ]; then
warn "No package matches $(OPM_HIGHLIGHT)$OpM62$(OPM_RESET), ignoring ..."
OpM54=0
fi
if [ "$OpM54" -ne 0 ]; then
OpM39="$(echo "$OpM37" | awk -F',|;' '{ print $2 }')"
OpM30="$(echo "$OpM37" | awk -F',|;' '{ print $3 }')"
OpM45="$(echo "$OpM37" | awk -F',|;' '{ print $4 }')"
OpM41="$(echo "$OpM37" | awk -F',|;' '{ print $11 }')"
OpM42="$(echo "$OpM37" | awk -F',|;' '{ print $12 }')"
OpM44="$(echo "$OpM37" | awk -F',|;' '{ print $13 }')"
OpM29="$(echo "$OpM37" | awk -F',|;' '{ print $20 }')"
if [ "$OpM66" -ne 0 ] && [ "$OpM39" != "%" ]; then
if [ "$OpM39" = "!" ]; then
OpM2="${OpM62}_apt${OPM_DELIM}${OpM2}"
else
OpM15="${OpM39}${OPM_DELIM}${OpM15}"
fi
elif [ "$OpM46" -ne 0 ] && [ "$OpM30" != "%" ]; then
if [ "$OpM30" = "!" ]; then
OpM2="${OpM62}_zypper${OPM_DELIM}${OpM2}"
else
OpM3="${OpM30}${OPM_DELIM}${OpM3}"
fi
elif [ "$OpM70" -ne 0 ] && [ "$OpM45" != "%" ]; then
OpM14="${OpM45}${OPM_DELIM}${OpM14}"
elif [ "$OpM41" != "%" ]; then
if [ "$OpM64" -ne 0 ] || [ "$OpM8" -ne 0 ]; then
OpM12="${OpM41}${OPM_DELIM}${OpM12}"
elif [ "$OpM64" -eq 0 ] && [ "$OpM8" -eq 0 ]; then
OpM22="${OPM_DEFAULT_NODE}${OPM_DELIM}${OpM22}"
OpM12="${OpM41}${OPM_DELIM}${OpM12}"
fi
elif [ "$OpM42" != "%" ]; then
if [ "$OpM67" -ne 0 ] || [ "$OpM11" -ne 0 ]; then
OpM16="${OpM42}${OPM_DELIM}${OpM16}"
elif [ "$OpM67" -eq 0 ] && [ "$OpM11" -eq 0 ]; then
OpM22="${OPM_DEFAULT_PYTHON}${OPM_DELIM}${OpM22}"
OpM16="${OpM42}${OPM_DELIM}${OpM16}"
fi
elif [ "$OpM44" != "%" ]; then
if [ "$OpM63" -ne 0 ] || [ "$OpM6" -ne 0 ]; then
OpM13="${OpM44}${OPM_DELIM}${OpM13}"
elif [ "$OpM63" -eq 0 ] && [ "$OpM6" -eq 0 ]; then
OpM22="${OPM_DEFAULT_RUBY}${OPM_DELIM}${OpM22}"
OpM13="${OpM44}${OPM_DELIM}${OpM13}"
fi
elif [ "$OpM29" != "%" ]; then
OpM2="${OpM62}_source${OPM_DELIM}${OpM2}"
else
warn "$OpM62 cannot be installed on this system."
fi
fi
done
if [ -n "$OpM22" ]; then
IFS="${OPM_DELIM}"
for OpM49 in ${OpM22}; do
if [ "$OpM66" -ne 0 ]; then
info "Will install $(OPM_HIGHLIGHT)${OpM49}$(OPM_RESET) via APT as a dependency."
OpM15="${OpM49}$(OPM_DELIM)${OpM15}"
elif [ "$OpM46" -ne 0 ]; then
info "Will install $(OPM_HIGHLIGHT)${OpM49}$(OPM_RESET) via Zypper as a dependency."
OpM3="${OpM49}$(OPM_DELIM)${OpM3}"
elif [ "$OpM70" -ne 0 ]; then
info "Will install $(OPM_HIGHLIGHT)${OpM49}$(OPM_RESET) via DNF as a dependency."
OpM14="${OpM49}$(OPM_DELIM)${OpM14}"
else
info "Will install $(OPM_HIGHLIGHT)${OpM49}$(OPM_RESET) from source as a dependency."
OpM2="${OpM49}$(OPM_DELIM)${OpM2}"
fi
if [ "${OpM49}" = "${OPM_DEFAULT_NODE}" ]; then
OpM8=1
fi
if [ "${OpM49}" = "${OPM_DEFAULT_PIP}" ]; then
OpM11=1
fi
if [ "${OpM49}" = "${OPM_DEFAULT_GEM}" ]; then
OpM6=1
fi
done
IFS=' '
fi
OpM9="$(printf '%s' "$OpM15" | tr "${OPM_DELIM}" " ")"
OpM1="$(printf '%s' "$OpM3" | tr "${OPM_DELIM}" " ")"
OpM10="$(printf '%s' "$OpM14" | tr "${OPM_DELIM}" " ")"
OpM4="$(printf '%s' "$OpM12" | tr "${OPM_DELIM}" " ")"
OpM7="$(printf '%s' "$OpM16" | tr "${OPM_DELIM}" " ")"
OpM5="$(printf '%s' "$OpM13" | tr "${OPM_DELIM}" " ")"
OpM0="$(printf '%s' "$OpM2" | tr "${OPM_DELIM}" " ")"
success "Queued packages:"
none "APT: ${OpM9}"
none "Zypper: ${OpM1}"
none "DNF: ${OpM10}"
none "NPM: ${OpM4}"
none "Pip: ${OpM7}"
none "Gem: ${OpM5}"
none "Special: ${OpM0}"
}
opm_describe() {
if [ "$#" -ne 1 ]; then
error "You must specify a package."
abort
fi
if [ "$OpM20" -eq 0 ]; then
opm_init
fi
OpM73="$(awk -F';' "BEGIN{IGNORECASE = 1}\$1 ~ /^$1$/ { print };" "$OpM28")"
if [ -n "$OpM73" ]; then
OpM76="$(echo "$OpM73" | awk -F';' '{ print $1 };')"
OpM38="$(echo "$OpM73" | awk -F';' '{ print $6 };')"
success "Name: \t\t$OpM76"
none "Description: \t$OpM38"
none "Support: \t\t" "" 1
opm_print_enabled "$(opm_get_column_code "$OpM73" "apt")" "apt"
opm_print_enabled "$(opm_get_column_code "$OpM73" "dnf")" "dnf"
opm_print_enabled "$(opm_get_column_code "$OpM73" "zypper")" "zypper"
opm_print_enabled "$(opm_get_column_code "$OpM73" "npm")" "npm"
opm_print_enabled "$(opm_get_column_code "$OpM73" "pip")" "pip"
opm_print_enabled "$(opm_get_column_code "$OpM73" "gem")" "gem"
opm_print_enabled "$(opm_get_column_code "$OpM73" "source")" "source"
if [ "$OpM34" -eq 0 ]; then
printf '\n'
fi
else
warn "No entries were found for $(OPM_HIGHLIGHT)$1$(OPM_RESET)."
fi
}
opm_clean() {
if [ "$OpM20" -eq 0 ]; then
opm_init
fi
debug "Not yet implemented."
}
opm_version() {
info "Omni Package Manager v${OPM_LIB_VERSION}"
}
opm_help() {
info "Available subcommands: $(OPM_HIGHLIGHT)version init fetch refresh describe query queue install upgrade$(OPM_RESET)"
}
opm_detect_os() {
case "$(uname)" in
Darwin)
OpM72="OSX"
;;
CYGWIN_NT-* | MSYS_NT-*)
OpM72="WINDOWS"
;;
FreeBSD)
OpM72="FREE_BSD"
;;
OpenBSD)
OpM72="OPEN_BSD"
;;
DragonFly)
OpM72="DRAGONFLY_BSD"
;;
Linux)
OpM72="UNKNOWN_LINUX"
OpM33="$(grep -E '^ID=([a-zA-Z]*)' /etc/os-release | cut -d '=' -f 2)"
case "$OpM33" in
*arch*)
OpM72="ARCH_LINUX"
;;
*debian*)
OpM72="DEBIAN_LINUX"
;;
*ubuntu*)
OpM72="UBUNTU_LINUX"
;;
*elementary*)
OpM72="ELEMENTARY_LINUX"
;;
*fedora*)
OpM72="FEDORA_LINUX"
;;
*coreos*)
OpM72="COREOS_LINUX"
;;
*gentoo*)
OpM72="GENTOO_LINUX"
;;
*mageia*)
OpM72="MAGEIA_LINUX"
;;
*centos*)
OpM72="CENTOS_LINUX"
;;
*opensuse*|*tumbleweed*)
OpM72="OPENSUSE_LINUX"
;;
*sabayon*)
OpM72="SABAYON_LINUX"
;;
*slackware*)
OpM72="SLACKWARE_LINUX"
;;
*linuxmint*)
OpM72="MINT_LINUX"
;;
*alpine*)
OpM72="ALPINE_LINUX"
;;
*aosc*)
OpM72="AOSC_LINUX"
;;
*nixos*)
OpM72="NIXOS_LINUX"
;;
*devuan*)
OpM72="DEVUAN_LINUX"
;;
*manjaro*)
OpM72="MANJARO_LINUX"
;;
*)
OpM72='UNKNOWN_LINUX'
error "Unable to determine Linux distribution."
;;
esac
case $(uname -o 2>/dev/null) in
Android)
OpM72="ANDROID"
;;
esac
;;
SunOS)
OpM72="SOLARIS"
;;
*)
OpM72="UNKNOWN"
error "Unable to determine operating system."
;;
esac
}
opm_cli() {
OpM65="$1"
if [ -n "$OpM65" ]; then
case "$OpM65" in
version)
opm_version
;;
fetch)
opm_fetch
;;
refresh)
opm_refresh
;;
upgrade)
opm_upgrade
;;
describe)
opm_describe "$2"
;;
query)
shift
opm_query "$@"
;;
queue)
shift
opm_queue "$@"
;;
install)
shift
opm_install "$@"
;;
init)
opm_init
;;
help)
opm_help
;;
--help)
opm_help
;;
*)
error "Unrecognized command: $(OPM_HIGHLIGHT)${OpM65}$(OPM_RESET). See $(OPM_HIGHLIGHT)opm help$(OPM_RESET) for a list of commands."
esac
fi
}
opm_cli "$@"
}
alias opm="opm_cli"
OpM61=0
if [ -n "$ZSH_EVAL_CONTEXT" ]; then 
case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
elif [ -n "$KSH_VERSION" ]; then
[ "$(cd $(dirname -- $0) && pwd -P)/$(basename -- $0)" != "$(cd $(dirname -- ${.sh.file}) && pwd -P)/$(basename -- ${.sh.file})" ] && sourced=1
elif [ -n "$BASH_VERSION" ]; then
(return 2>/dev/null) && sourced=1 
else # All other shells: examine $0 for known shell binary filenames
case ${0##*/} in sh|dash) sourced=1;; esac
fi
if [ "$OpM61" -eq 0 ]; then
opm_cli "$@"
fi
